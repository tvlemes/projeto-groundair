version: '3.7'


# Networks
networks:
  stream-net-iot:
    driver: bridge


services:

# POSTGRESQL
    postgres:
        image: postgres:13
        hostname: postgres
        container_name: postgres
        environment:
            - TZ=America/Araguaina
            - POSTGRES_USER=airflow
            - POSTGRES_PASSWORD=airflow
            - POSTGRES_DB=airflow
        volumes:
            - ./store_files:/datasets            
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "airflow"]
            interval: 5s
            retries: 5
        networks:
            - stream-net-iot
        deploy:
            resources:
                limits:
                    memory: 500m
        

# PGADMIN
    pgadmin:
        image: dpage/pgadmin4
        container_name: pgadmin
        restart: always
        hostname: pgadmin
        environment:
            - TZ=America/Araguaina
            - PGADMIN_DEFAULT_EMAIL=lemes_vilarinho@yahoo.com.br
            - PGADMIN_DEFAULT_PASSWORD=123
        ports:
            - "5050:80"
        networks:
            - stream-net-iot
        deploy:
            resources:
                limits:
                    memory: 500m


# AIRFLOW
    webserver:
        image: thiago/airflow:2.5.1
        restart: always
        container_name: airflow
        hostname: airflow
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - ./config/conf_airflow.env # Configuration Time Zone and SMTP
            - ./config/var_dags.env # Confguring variables in DAGs
        volumes:
            - ./dags:/usr/local/airflow/dags
            - ./storage:/usr/local/airflow/storage
            - ./plugins:/usr/local/airflow/plugins
            - ./config:/usr/local/airflow/config
        ports:
            - "8080:8080"
        networks:
            - stream-net-iot


# ZOOKEEPER
    zookeeper:
        image: confluentinc/cp-zookeeper:5.5.2
        hostname: zookeeper
        container_name: zookeeper
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
            TZ: America/Araguaina
        networks:
            - stream-net-iot
        deploy:
            resources:
                limits:
                    memory: 500m
    
# BROKER
    broker:
        image: confluentinc/cp-server:5.5.2
        hostname: broker
        container_name: broker
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
            - "9101:9101"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_JMX_PORT: 9101
            KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
            CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
            CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
            CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
            CONFLUENT_METRICS_ENABLE: 'true'
            CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
            TZ: America/Araguaina
        networks:
            - stream-net-iot
        volumes:
            - ./kafka:/store_files
        deploy:
            resources:
                limits:
                    memory: 500m

# KAFDROP
    # kafdrop:
    #     image: obsidiandynamics/kafdrop:latest
    #     hostname: kafdrop
    #     container_name: kafdrop
    #     networks: 
    #         - stream-net-iot
    #     depends_on:
    #         - broker
    #     ports:
    #         - 19000:9000
    #     environment:
    #         KAFKA_BROKERCONNECT: kafka:29092


# MOSQUITTO
    # mosquitto:
    #     hostname: mosquitto
    #     container_name: mosquitto
    #     image: eclipse-mosquitto:latest
    #     ports:
    #         - 1883:1883
    #         - 9001:9001
    #         - 8883:8883
    #     networks:
    #         - stream-net-iot
        # volumes:
            # - ./mosquitto/config:/mosquitto/config
            # - ./mosquitto/data:/mosquitto/data


# Schema Registry
    # schema-registry:
    #     image: confluentinc/cp-schema-registry:5.5.2
    #     hostname: schema-registry
    #     container_name: schema-registry
    #     depends_on:
    #         - zookeeper
    #         - broker
    #     ports:
    #         - "8081:8081"
    #     environment:
    #         SCHEMA_REGISTRY_HOST_NAME: schema-registry
    #         SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
    #     networks:
    #         - stream-net-iot
    #     deploy:
    #         resources:
    #             limits:
    #                 memory: 500m


# Node Red
    # node-red:
    #     image: nodered/node-red:latest
    #     hostname: node-red
    #     container_name: node-red
    #     environment:
    #         - TZ=America/Araguaina
    #     ports:
    #         - "1880:1880"
    #     networks:
    #         - stream-net-iot
    #     volumes:
    #     - ./node-red/data:/data


# Connect
    # connect:
    #     image: cnfldemos/cp-server-connect-datagen:0.3.2-5.5.0
    #     hostname: connect
    #     container_name: connect
    #     depends_on:
    #         - zookeeper
    #         - broker
    #         - schema-registry
    #     ports:
    #         - "8083:8083"
    #     environment:
    #         CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
    #         CONNECT_REST_ADVERTISED_HOST_NAME: connect
    #         CONNECT_REST_PORT: 8083
    #         CONNECT_GROUP_ID: compose-connect-group
    #         CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
    #         CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
    #         CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
    #         CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
    #         CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
    #         CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
    #         CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
    #         CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
    #         CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
    #         CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    #         CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
    #         CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
    #         CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
    #         # CLASSPATH required due to CC-2422
    #         CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.5.2.jar
    #         CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
    #         CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
    #         CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    #         CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    #     networks:
    #         - stream-net-iot
    #     deploy:
    #         resources:
    #             limits:
    #                 memory: 500m


# Control Center
    # control-center:
    #     image: confluentinc/cp-enterprise-control-center
    #     hostname: control-center
    #     container_name: control-center
    #     depends_on:
    #         - zookeeper
    #         - broker
            # - schema-registry
            # - connect
        #     # - ksqldb-server
        # ports:
        #     - "9021:9021"
        # environment:
        #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
        #     CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        #     CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
        #     # CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
        #     # CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
        #     # CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
        #     CONTROL_CENTER_REPLICATION_FACTOR: 1
        #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
        #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
        #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
        #     PORT: 9021
        # networks:
        #     - stream-net-iot
        # deploy:
        #     resources:
        #         limits:
        #             memory: 500m


# KSQLDB Server
    # ksqldb-server:
    #     image: confluentinc/cp-ksqldb-server:5.5.2
    #     hostname: ksqldb-server
    #     container_name: ksqldb-server
    #     depends_on:
    #         - broker
    #         - connect
    #     ports:
    #         - "8088:8088"
    #     environment:
    #         KSQL_CONFIG_DIR: "/etc/ksql"
    #         KSQL_BOOTSTRAP_SERVERS: "broker:29092"
    #         KSQL_HOST_NAME: ksqldb-server
    #         KSQL_LISTENERS: "http://0.0.0.0:8088"
    #         KSQL_CACHE_MAX_BYTES_BUFFERING: 0
    #         KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
    #         KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
    #         KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
    #         KSQL_KSQL_CONNECT_URL: "http://connect:8083"
    #         KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
    #         KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
    #         KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    #     networks:
    #         - stream-net-iot
    #     deploy:
    #         resources:
    #             limits:
    #                 memory: 500m


# KSQLDB CLI
    # ksqldb-cli:
    #     image: confluentinc/cp-ksqldb-cli:5.5.2
    #     container_name: ksqldb-cli
    #     hostname: ksqldb-cli
    #     depends_on:
    #         - broker
    #         - connect
    #         - ksqldb-server
    #     entrypoint: /bin/sh
    #     tty: true
    #     networks:
    #         - stream-net-iot
    #     deploy:
    #         resources:
    #             limits:
    #                 memory: 500m


# KSQL DATAGEN
    # ksql-datagen:
    #     image: confluentinc/ksqldb-examples:5.5.2
    #     hostname: ksql-datagen
    #     container_name: ksql-datagen
    #     depends_on:
    #         - ksqldb-server
    #         - broker
    #         - schema-registry
    #         - connect
    #     command: "bash -c 'echo Waiting for Kafka to be ready... && \
    #                     cub kafka-ready -b broker:29092 1 40 && \
    #                     echo Waiting for Confluent Schema Registry to be ready... && \
    #                     cub sr-ready schema-registry 8081 40 && \
    #                     echo Waiting a few seconds for topic creation to finish... && \
    #                     sleep 11 && \
    #                     tail -f /dev/null'"
    #     environment:
    #         KSQL_CONFIG_DIR: "/etc/ksql"
    #         STREAMS_BOOTSTRAP_SERVERS: broker:29092
    #         STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
    #         STREAMS_SCHEMA_REGISTRY_PORT: 8081
    #     networks:
    #         - stream-net-iot
    #     deploy:
    #         resources:
    #             limits:
    #                 memory: 500m


# REST PROXY
    # rest-proxy:
    #     image: confluentinc/cp-kafka-rest:5.5.2
    #     depends_on:
    #         - zookeeper
    #         - broker
    #         - schema-registry
    #     ports:
    #         - 8082:8082
    #     hostname: rest-proxy
    #     container_name: rest-proxy
    #     environment:
    #         KAFKA_REST_HOST_NAME: rest-proxy
    #         KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
    #         KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
    #         KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
    #     networks:
    #         - stream-net-iot
    #     deploy:
    #         resources:
    #             limits:
    #                 memory: 500m